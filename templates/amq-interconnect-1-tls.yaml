kind: Template
apiVersion: v1
metadata:
  name: amq-interconnect-1-tls
  annotations:
    description: Application template for Red Hat Interconnect Router.
    iconClass: icon-amq
    openshift.io/provider-display-name: Red Hat, Inc.
    tags: messaging,amq
    version: 1.4.10
    openshift.io/display-name: Red Hat Interconnect Router 1.x (with TLS)
labels:
  template: amq-interconnect-1-tls
  xpaas: 1.4.10
message: A new messaging service has been created in your project.
parameters:
- displayName: Application Name
  description: The name for the application.
  name: APPLICATION_NAME
  value: router
  required: true
- displayName: Application Namespace
  description: The namespace of the application.
  name: APPLICATION_NAMESPACE
  value: router
  required: true
- displayName: Secret Name
  description: Name of a secret containing TLS related files
  name: AMQ_SECRET
  value: interconnect-app-secret
  required: true
- displayName: ImageStream Namespace
  description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  name: IMAGE_STREAM_NAMESPACE
  value: openshift
- displayName: qdrouterd.conf
  description: The router configuration file
  name: QDROUTERD_CONF
  value: |-
    router {
        mode: interior
        id: ${HOSTNAME}
    }

    listener {
        host: 0.0.0.0
        port: amqp
        authenticatePeer: no
        saslMechanisms: ANONYMOUS
    }

    listener {
      host: 0.0.0.0
      port: 5671
      sslProfile: ssl_details
      authenticatePeer: no
      requireSsl: true
    }

    listener {
      host: 0.0.0.0
      port: 55672
      role: inter-router
      authenticatePeer: no
      saslMechanisms: ANONYMOUS
    }

    sslProfile {
      name: ssl_internal_details
      certFile: /etc/interconnect-certs/tls.crt
      keyFile: /etc/interconnect-certs/tls.key
    }

    sslProfile {
      name: ssl_details
      certFile: /etc/interconnect-certs/tls.crt
      keyFile: /etc/interconnect-certs/tls.key
    }

    address {
        prefix: closest
        distribution: closest
    }

    address {
        prefix: multicast
        distribution: multicast
    }

    address {
        prefix: unicast
        distribution: closest
    }

    address {
        prefix: exclusive
        distribution: closest
    }

    address {
        prefix: broadcast
        distribution: multicast
    }

objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}-amqp
    labels:
      application: ${APPLICATION_NAME}
    annotations:
      description: The router's AMQP port.
  spec:
    ports:
    - port: 5672
      targetPort: 5672
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}-inter
    labels:
      application: ${APPLICATION_NAME}
    annotations:
      description: The router's inter-router port.
  spec:
    ports:
    - port: 55672
      targetPort: 55672
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}-http
    labels:
      application: ${APPLICATION_NAME}
    annotations:
      description: The router's http port.
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-amq"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        maxSurge: 0
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}-amq"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_STREAM_NAMESPACE}"
          name: amq-interconnect-11-openshift:latest
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}-amq"
    template:
      metadata:
        name: "${APPLICATION_NAME}-amq"
        labels:
          deploymentConfig: "${APPLICATION_NAME}-amq"
          application: "${APPLICATION_NAME}"
      spec:
        serviceAccountName: ${APPLICATION_NAME}
        terminationGracePeriodSeconds: 60
        containers:
        - name: "${APPLICATION_NAME}-amq"
          ports: 
          - name: amqp
            containerPort: 5672
            protocol: TCP
          - name: amqps
            containerPort: 5671
            protocol: TCP
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: inter
            containerPort: 55672
            protocol: TCP
          env:
          - name: APPLICATION_NAME
            value: "${APPLICATION_NAME}"
          - name: QDROUTERD_CONF
            value: "${QDROUTERD_CONF}"
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
            image: amq-interconnect-11-openshift:latest
          volumeMounts:
          - name: config-volume
            mountPath: /opt/interconnect/etc/configmap/
          - name: ${AMQ_SECRET}
            readOnly: true
            mountPath: /etc/interconnect-certs/
          terminationGracePeriodSeconds: 60
        volumes:
        - name: config-volume
          configMap:
            name: configmap
        - name: ${AMQ_SECRET}
          secret:
            secretName: ${AMQ_SECRET}
        imagePullPolicy: Always
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: configmap
  data:
    qdrouterd.conf: ${QDROUTERD_CONF}
- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
- kind: Role
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
  rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list"]
- kind: RoleBinding
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
  subjects:
  - kind: ServiceAccount
    name: ${APPLICATION_NAME}
  roleRef:
    kind: Role
    name: ${APPLICATION_NAME}
    namespace: ${APPLICATION_NAMESPACE}
    apiGroup: rbac.authorization.k8s.io
